
MBlab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ad  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000607  00000000  00000000  000008ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d4  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cc  00000000  00000000  000015a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <PWM_init>:
uint8_t flag = 0;

void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  7c:	89 e6       	ldi	r24, 0x69	; 105
  7e:	83 bf       	out	0x33, r24	; 51
	DDRB |= (1<<PB3);  /*set OC0 pin as output*/
  80:	bb 9a       	sbi	0x17, 3	; 23
	DDRC |= (0xff);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	84 bb       	out	0x14, r24	; 20
	DDRD |= (0xff);
  88:	91 b3       	in	r25, 0x11	; 17
  8a:	81 bb       	out	0x11, r24	; 17
	TIMSK |= (1<<OCIE0);
  8c:	89 b7       	in	r24, 0x39	; 57
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	89 bf       	out	0x39, r24	; 57
	ADMUX = 0b01100000;
  92:	80 e6       	ldi	r24, 0x60	; 96
  94:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10001111;
  96:	8f e8       	ldi	r24, 0x8F	; 143
  98:	86 b9       	out	0x06, r24	; 6
	sei();
  9a:	78 94       	sei
  9c:	08 95       	ret

0000009e <__vector_14>:
}

ISR(ADC_vect){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
	PORTC = ADCH; // Virðutiniai 8 bitai iðsaugomi kintamajame result }
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	85 bb       	out	0x15, r24	; 21
	PORTD = ADCH;
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	82 bb       	out	0x12, r24	; 18
}
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_19>:

ISR(TIMER0_COMP_vect) {
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
	if(duty == 255){
  cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <duty>
  d0:	8f 3f       	cpi	r24, 0xFF	; 255
  d2:	21 f4       	brne	.+8      	; 0xdc <__vector_19+0x1e>
		flag = 1;
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <_edata>
  da:	0e c0       	rjmp	.+28     	; 0xf8 <__vector_19+0x3a>
	}
	if(duty == 0){
  dc:	81 11       	cpse	r24, r1
  de:	03 c0       	rjmp	.+6      	; 0xe6 <__vector_19+0x28>
		flag = 0;
  e0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  e4:	04 c0       	rjmp	.+8      	; 0xee <__vector_19+0x30>
	}
	if(flag==0){
  e6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <_edata>
  ea:	91 11       	cpse	r25, r1
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <__vector_19+0x3a>
		OCR0= ++duty;
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <duty>
  f4:	8c bf       	out	0x3c, r24	; 60
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__vector_19+0x42>
	} else {
		OCR0= --duty;
  f8:	81 50       	subi	r24, 0x01	; 1
  fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <duty>
  fe:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	9c e7       	ldi	r25, 0x7C	; 124
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <__vector_19+0x46>
 108:	00 c0       	rjmp	.+0      	; 0x10a <__vector_19+0x4c>
 10a:	00 00       	nop
	}
	
	_delay_ms(8);
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <main>:

int main ()
{
	PWM_init();
 11a:	0e 94 3e 00 	call	0x7c	; 0x7c <PWM_init>
	while (1)
	{
		ADCSRA |= (1 << ADSC); 
 11e:	36 9a       	sbi	0x06, 6	; 6
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x4>

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
