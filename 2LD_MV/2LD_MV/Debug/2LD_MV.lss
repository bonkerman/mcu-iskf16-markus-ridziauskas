
2LD_MV.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000662  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bd  00000000  00000000  00000896  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000258  00000000  00000000  00000e53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000305  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <timer2_init>:



void timer2_init()
{
	TCCR0 |= (1<<WGM00)|(1<<WGM01)|(1<<CS02);
  7c:	83 b7       	in	r24, 0x33	; 51
  7e:	8c 64       	ori	r24, 0x4C	; 76
  80:	83 bf       	out	0x33, r24	; 51
	TCNT0 = 0;
  82:	12 be       	out	0x32, r1	; 50
	TIMSK |= (1 << TOIE0);
  84:	89 b7       	in	r24, 0x39	; 57
  86:	81 60       	ori	r24, 0x01	; 1
  88:	89 bf       	out	0x39, r24	; 57
	sei();
  8a:	78 94       	sei
	tot_overflow = 0;
  8c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  90:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  94:	08 95       	ret

00000096 <__vector_9>:
	//PORTC ^= (1<<6);
}
ISR(TIMER0_OVF_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	tot_overflow++;
  a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:
	int TOT2 = 732;
	int REM2 = 108;
	int TOT = TOT1;
	int REM = REM1;
	int i = 0;
    DDRA = 255;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRC |= 255;
  c8:	94 b3       	in	r25, 0x14	; 20
  ca:	84 bb       	out	0x14, r24	; 20
	timer2_init();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <timer2_init>
	int TOT1 = 122;
	int REM1 = 18;
	int TOT2 = 732;
	int REM2 = 108;
	int TOT = TOT1;
	int REM = REM1;
  d0:	42 e1       	ldi	r20, 0x12	; 18
  d2:	50 e0       	ldi	r21, 0x00	; 0
{
	int TOT1 = 122;
	int REM1 = 18;
	int TOT2 = 732;
	int REM2 = 108;
	int TOT = TOT1;
  d4:	2a e7       	ldi	r18, 0x7A	; 122
  d6:	30 e0       	ldi	r19, 0x00	; 0
    while (1) 
    {
		for (i = 0; i<=1; i++){
		if (tot_overflow >= TOT){
			if (TCNT0 >= REM){
				PORTC ^= (1<<3);
  d8:	c8 e0       	ldi	r28, 0x08	; 8
  da:	bc ed       	ldi	r27, 0xDC	; 220
  dc:	a2 e0       	ldi	r26, 0x02	; 2
  de:	fc e6       	ldi	r31, 0x6C	; 108
  e0:	e0 e0       	ldi	r30, 0x00	; 0
{
	int TOT1 = 122;
	int REM1 = 18;
	int TOT2 = 732;
	int REM2 = 108;
	int TOT = TOT1;
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	90 e0       	ldi	r25, 0x00	; 0
	DDRC |= 255;
	timer2_init();
    while (1) 
    {
		for (i = 0; i<=1; i++){
		if (tot_overflow >= TOT){
  e6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <_edata>
  ea:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <_edata+0x1>
  ee:	62 17       	cp	r22, r18
  f0:	73 07       	cpc	r23, r19
  f2:	6c f0       	brlt	.+26     	; 0x10e <main+0x4a>
			if (TCNT0 >= REM){
  f4:	62 b7       	in	r22, 0x32	; 50
  f6:	70 e0       	ldi	r23, 0x00	; 0
  f8:	64 17       	cp	r22, r20
  fa:	75 07       	cpc	r23, r21
  fc:	44 f0       	brlt	.+16     	; 0x10e <main+0x4a>
				PORTC ^= (1<<3);
  fe:	65 b3       	in	r22, 0x15	; 21
 100:	6c 27       	eor	r22, r28
 102:	65 bb       	out	0x15, r22	; 21
				TCNT0 = 0;
 104:	12 be       	out	0x32, r1	; 50
				tot_overflow = 0;
 106:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 10e:	01 97       	sbiw	r24, 0x01	; 1
    DDRA = 255;
	DDRC |= 255;
	timer2_init();
    while (1) 
    {
		for (i = 0; i<=1; i++){
 110:	51 f7       	brne	.-44     	; 0xe6 <main+0x22>
		}
		if (TOT = TOT1)
		TOT = TOT2;
		if (REM = REM1)
		REM = REM2;
		PORTA = TCNT0;
 112:	82 b7       	in	r24, 0x32	; 50
 114:	8b bb       	out	0x1b, r24	; 27
 116:	2b 2f       	mov	r18, r27
 118:	3a 2f       	mov	r19, r26
 11a:	4f 2f       	mov	r20, r31
 11c:	5e 2f       	mov	r21, r30
    }
 11e:	e1 cf       	rjmp	.-62     	; 0xe2 <main+0x1e>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
